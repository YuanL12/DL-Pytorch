# Network in Network (NiN)
Use a  1Ã—1  convolutional layer to replace a fully-connected layer acting independently on each pixel location to store spatial information.


## Define NiN block
```Python
import torch
from torch import nn
from d2l import torch as d2l

def nin_block(in_channels, out_channels, kernel_size, strides, padding):
    return nn.Sequential(
        nn.Conv2d(in_channels, out_channels, kernel_size, strides, padding),
        nn.ReLU(), nn.Conv2d(out_channels, out_channels, kernel_size=1),
        nn.ReLU(), nn.Conv2d(out_channels, out_channels, kernel_size=1),
        nn.ReLU())
```

## NiN network
Very like AlexNet
```Python
net = nn.Sequential(
    # 1 represents one channel for grey-image. 
    nin_block(1, 96, kernel_size=11, strides=4, padding=0),
    nn.MaxPool2d(3, stride=2),
    nin_block(96, 256, kernel_size=5, strides=1, padding=2),
    nn.MaxPool2d(3, stride=2),
    nin_block(256, 384, kernel_size=3, strides=1, padding=1),
    nn.MaxPool2d(3, stride=2), 
    nn.Dropout(0.5), # will not affect shape, only for regularization
    # There are 10 label classes
    nin_block(384, 10, kernel_size=3, strides=1, padding=1),
    # Global average pooling layer to get a 1x1 value on each channel
    # 'Global' represents maximum over all values on each channel
    nn.AdaptiveAvgPool2d((1, 1)), 
    # use 10 channels each with shape 1x1 to mimic the fucntionality of 
    # Fully-connected Layer

    # Transform the four-dimensional output into two-dimensional output with a
    # shape of (batch size, 10)
    nn.Flatten())
```

